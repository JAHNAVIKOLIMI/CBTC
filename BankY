import java.io.*;
import java.util.*;

public class BankY {
    private Map<String, Account> accounts = new HashMap<>();

    public void createAccount(String accountNumber, String owner) {
        if (accounts.containsKey(accountNumber)) {
            System.out.println("Account already exists.");
        } else {
            accounts.put(accountNumber, new Account(accountNumber, owner));
            System.out.println("Account created successfully.");
        }
    }

    public void deposit(String accountNumber, double amount) {
        Account account = accounts.get(accountNumber);
        if (account != null) {
            account.deposit(amount);
        } else {
            System.out.println("Account not found.");
        }
    }

    public void withdraw(String accountNumber, double amount) {
        Account account = accounts.get(accountNumber);
        if (account != null) {
            account.withdraw(amount);
        } else {
            System.out.println("Account not found.");
        }
    }

    public void transfer(String fromAccount, String toAccount, double amount) {
        Account from = accounts.get(fromAccount);
        Account to = accounts.get(toAccount);

        if (from != null && to != null) {
            if (from.withdraw(amount)) {
                to.deposit(amount);
                System.out.println("Transfer successful.");
            } else {
                System.out.println("Insufficient funds.");
            }
        } else {
            System.out.println("One or both accounts not found.");
        }
    }

    public void saveAccounts(String filename) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filename))) {
            oos.writeObject(accounts);
            System.out.println("Accounts saved successfully.");
        } catch (IOException e) {
            System.out.println("Error saving accounts: " + e.getMessage());
        }
    }

    public void loadAccounts(String filename) {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            accounts = (Map<String, Account>) ois.readObject();
            System.out.println("Accounts loaded successfully.");
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error loading accounts: " + e.getMessage());
        }
    }

    public void printAccountDetails(String accountNumber) {
        Account account = accounts.get(accountNumber);
        if (account != null) {
            System.out.println(account);
        } else {
            System.out.println("Account not found.");
        }
    }

    public static void main(String[] args) {
        BankY bank = new BankY();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nBankY Operations:");
            System.out.println("1. Create Account");
            System.out.println("2. Deposit");
            System.out.println("3. Withdraw");
            System.out.println("4. Transfer");
            System.out.println("5. Save Accounts");
            System.out.println("6. Load Accounts");
            System.out.println("7. Print Account Details");
            System.out.println("8. Exit");

            System.out.print("Choose an operation: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter account number: ");
                    String accNum = scanner.nextLine();
                    System.out.print("Enter owner name: ");
                    String owner = scanner.nextLine();
                    bank.createAccount(accNum, owner);
                    break;
                case 2:
                    System.out.print("Enter account number: ");
                    accNum = scanner.nextLine();
                    System.out.print("Enter amount to deposit: ");
                    double deposit = scanner.nextDouble();
                    bank.deposit(accNum, deposit);
                    break;
                case 3:
                    System.out.print("Enter account number: ");
                    accNum = scanner.nextLine();
                    System.out.print("Enter amount to withdraw: ");
                    double withdraw = scanner.nextDouble();
                    bank.withdraw(accNum, withdraw);
                    break;
                case 4:
                    System.out.print("Enter source account number: ");
                    String fromAcc = scanner.nextLine();
                    System.out.print("Enter destination account number: ");
                    String toAcc = scanner.nextLine();
                    System.out.print("Enter amount to transfer: ");
                    double transfer = scanner.nextDouble();
                    bank.transfer(fromAcc, toAcc, transfer);
                    break;
                case 5:
                    System.out.print("Enter filename to save accounts: ");
                    String saveFile = scanner.nextLine();
                    bank.saveAccounts(saveFile);
                    break;
                case 6:
                    System.out.print("Enter filename to load accounts: ");
                    String loadFile = scanner.nextLine();
                    bank.loadAccounts(loadFile);
                    break;
                case 7:
                    System.out.print("Enter account number: ");
                    accNum = scanner.nextLine();
                    bank.printAccountDetails(accNum);
                    break;
                case 8:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}

class Account implements Serializable {
    private static final long serialVersionUID = 1L;
    private String accountNumber;
    private String owner;
    private double balance;

    public Account(String accountNumber, String owner) {
        this.accountNumber = accountNumber;
        this.owner = owner;
        this.balance = 0.0;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposit successful. New balance: " + balance);
        } else {
            System.out.println("Invalid amount.");
        }
    }

    public boolean withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrawal successful. New balance: " + balance);
            return true;
        } else {
            System.out.println("Invalid amount or insufficient funds.");
            return false;
        }
    }

    @Override
    public String toString() {
        return "Account Number: " + accountNumber + ", Owner: " + owner + ", Balance: " + balance;
    }
}
